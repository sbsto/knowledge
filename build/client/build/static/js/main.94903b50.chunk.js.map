{"version":3,"sources":["components/DocParagraph.tsx","components/Document.tsx","components/DocNav.tsx","components/DocControl.tsx","App.tsx","theme.ts","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","paragraphStyle","border","fontSize","backgroundColor","resize","outline","width","DocParagraph","props","useState","placeholder","setPlaceholder","classes","Grid","item","TextareaAutosize","className","value","bodyText","onChange","event","target","onKeyDown","key","shiftKey","length","preventDefault","onBackspace","onEnter","onFocus","onBlur","autoFocus","titleStyle","fontWeight","color","DocView","fullBody","body","map","paragraph","index","onBodyChange","container","direction","sm","alignItems","title","onTitleChange","StyledTreeItem","withStyles","theme","createStyles","root","marginTop","spacing","marginRight","TreeItem","StyledButton","padding","borderRadius","minWidth","marginLeft","Button","DocNav","documents","titles","id","String","nodeId","label","icon","Description","onClick","onSelect","justify","Typography","variant","aria-label","size","onAddDoc","Add","TreeView","DocControl","setDocuments","selectedDocIndex","setSelectedDocIndex","doc","updatedSelectedDocIndex","Document","paragraphIndex","newDocuments","splice","App","Container","maxWidth","fontFamily","createMuiTheme","palette","primary","main","contrastText","text","background","default","typography","h1","h2","button","textTransform","shape","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94903b50.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Grid, TextareaAutosize } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n    paragraphStyle: {\n        border: \"0px\",\n        fontSize: \"20px\",\n        backgroundColor: \"whitesmoke\",\n        resize: \"none\",\n        outline: \"none\",\n        width: \"100%\"\n    }\n})\n\ninterface DocParagraphProps {\n    bodyText: string;\n    onChange(value: string): void;\n    onEnter(): void;\n    onBackspace(): void;\n}\n\nfunction DocParagraph(props: DocParagraphProps) {\n    const [placeholder, setPlaceholder] = useState('start writing here...')\n\n    const classes = useStyles()\n\n    const keyPressed = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (event.key === \"Enter\" && !event.shiftKey) {\n            event.preventDefault()\n            props.onEnter()\n        } else if (event.key === \"Backspace\" && props.bodyText.length === 0) {\n            event.preventDefault()\n            props.onBackspace()\n        }\n    }\n\n    return (\n        <Grid item>\n            <TextareaAutosize\n                className={classes.paragraphStyle}\n                placeholder={placeholder}\n                value={props.bodyText}\n                onChange={event => props.onChange(event.target.value)}\n                onKeyDown={keyPressed}\n                onFocus={() => setPlaceholder('start writing here...')}\n                onBlur={() => setPlaceholder('')}\n                autoFocus\n            />\n        </Grid>\n    )\n}\n\nexport default DocParagraph","import React from 'react'\nimport { Grid, TextareaAutosize } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { DocParagraph } from './'\n\nconst useStyles = makeStyles({\n    titleStyle: {\n        border: \"0px\",\n        fontSize: \"30px\",\n        fontWeight: 500,\n        color: \"#333333\",\n        backgroundColor: \"whitesmoke\",\n        resize: \"none\",\n        outline: \"none\",\n        width: \"100%\"\n    }\n})\n\ninterface DocViewProps {\n    title: string;\n    body: string[];\n    onBodyChange(value: string, index: number): void;\n    onTitleChange(value: string): void;\n    onEnter(index: number): void;\n    onBackspace(index: number): void;\n}\n\nfunction DocView(props: DocViewProps) {\n    const classes = useStyles()\n\n    const fullBody = props.body.map((paragraph, index) => {\n        return (\n            <DocParagraph\n                key={index}\n                bodyText={props.body[index]}\n                onChange={(value) => props.onBodyChange(value, index)}\n                onEnter={() => props.onEnter(index)}\n                onBackspace={() => props.onBackspace(index)}\n            />\n        )\n    })\n\n    return (\n        <Grid\n            container\n            item\n            direction=\"column\"\n            sm={9}\n            alignItems=\"stretch\"\n        >\n            <Grid item >\n                <TextareaAutosize\n                    className={classes.titleStyle}\n                    placeholder=\"title\"\n                    value={props.title}\n                    onChange={(event) => props.onTitleChange(event.target.value)}\n                />\n            </Grid>\n            <Grid container item direction=\"column\">\n                {fullBody}\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default DocView","import React from 'react'\nimport { Typography, Grid, Button, ButtonProps } from '@material-ui/core'\nimport { withStyles, Theme, createStyles } from '@material-ui/core/styles'\nimport { Description, Add } from '@material-ui/icons'\nimport { TreeItem, TreeView } from '@material-ui/lab'\nimport { TreeItemProps } from '@material-ui/lab/TreeItem'\n\nconst StyledTreeItem = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginTop: theme.spacing(1),\n            marginRight: theme.spacing(5),\n            // borderBottom: \"0.5px solid #aaaaaa\"\n        },\n    }),\n)((props: TreeItemProps) => <TreeItem {...props} />)\n\nconst StyledButton = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            padding: 0,\n            borderRadius: 8,\n            minWidth: 0,\n            marginLeft: theme.spacing(2),\n            marginRight: theme.spacing(2)\n        }\n    }),\n)((props: ButtonProps) => <Button {...props} />)\n\ninterface DocNavProps {\n    titles: String[];\n    onSelect(index: number): void;\n    onAddDoc(): void\n}\n\nfunction DocNav(props: DocNavProps) {\n\n    const documents = props.titles.map((title, index) => {\n        const id = String(index)\n        return (\n            <StyledTreeItem\n                key={index}\n                nodeId={id}\n                label={title}\n                icon={<Description />}\n                onClick={() => props.onSelect(index)}\n            />\n        )\n    })\n\n    return (\n        <Grid item container sm={3}\n            direction=\"column\"\n        >\n            <Grid\n                item container\n                justify=\"flex-start\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <Typography variant=\"h2\">documents</Typography>\n                </Grid>\n                <Grid item>\n                    <StyledButton\n                        color=\"primary\"\n                        aria-label=\"add\"\n                        size=\"small\"\n                        onClick={props.onAddDoc}\n                    >\n                        <Add />\n                    </StyledButton>\n                </Grid>\n            </Grid>\n            <Grid item>\n                <TreeView>\n                    {documents}\n                </TreeView>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default DocNav","import React, { useState } from 'react'\nimport { Grid } from '@material-ui/core'\nimport { DocNav, Document } from './'\n\ninterface Doc {\n    title: string;\n    body: string[];\n}\n\nfunction DocControl() {\n    const [documents, setDocuments] = useState<Doc[]>([\n        {\n            title: 'Title 1',\n            body: ['This is the body of my first document.', 'I hope this works.']\n        },\n        {\n            title: 'Title 2',\n            body: ['This is the body of my second document.', 'This might work.']\n        }\n    ]\n    )\n\n    const [selectedDocIndex, setSelectedDocIndex] = useState(0)\n\n    const addDoc = () => {\n        const updatedSelectedDocIndex = documents.length\n        setDocuments([...documents, { title: 'new document', body: [''] }])\n        setSelectedDocIndex(updatedSelectedDocIndex)\n    }\n\n    const updateParagraph = (value: string, paragraphIndex: number): void => {\n        const newDocuments = [...documents]\n        newDocuments[selectedDocIndex].body[paragraphIndex] = value\n        setDocuments(newDocuments)\n    }\n\n    const updateTitle = (value: string): void => {\n        const newDocuments = [...documents]\n        newDocuments[selectedDocIndex].title = value\n        setDocuments(newDocuments)\n    }\n\n    const createNewParagraph = (paragraphIndex: number) => {\n        const newDocuments = [...documents]\n        newDocuments[selectedDocIndex].body.splice(paragraphIndex + 1, 0, '')\n        setDocuments(newDocuments)\n    }\n\n    const deleteParagraph = (paragraphIndex: number) => {\n        const newDocuments = [...documents]\n        newDocuments[selectedDocIndex].body.splice(paragraphIndex, 1)\n        setDocuments(newDocuments)\n    }\n\n    return (\n        <Grid container>\n            <DocNav\n                titles={documents.map((doc) => doc.title)}\n                onSelect={setSelectedDocIndex}\n                onAddDoc={addDoc}\n            />\n            <Document\n                title={documents[selectedDocIndex].title}\n                body={documents[selectedDocIndex].body}\n                onBodyChange={updateParagraph}\n                onTitleChange={updateTitle}\n                onEnter={createNewParagraph}\n                onBackspace={deleteParagraph}\n            />\n        </Grid>\n    )\n}\n\nexport default DocControl","import React from 'react';\nimport { Container, Typography } from '@material-ui/core'\nimport { DocControl } from './components/'\n\nfunction App() {\n  return (\n    <Container className=\"App\" maxWidth=\"lg\">\n      {/* Instead of the below, we will have a funcitonal header component.\n          This is just a placeholder. I think the material-ui \"App Bar\" component\n          could look really nice here.\n      */}\n      <Typography variant=\"h1\">home</Typography>\n      <DocControl />\n    </Container>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core/styles\"\n\nconst fontFamily = \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen','Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',sans-serif\"\n\nexport default createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#333333\",\n            contrastText: \"#f5f5f5\"\n        },\n        text: {\n            primary: \"#333333\"\n        },\n        background: {\n            default: \"#f5f5f5\"\n        }\n    },\n    typography: {\n        fontFamily,\n        fontSize: 18,\n        h1: {\n            fontFamily,\n            fontWeight: 600,\n            fontSize: 64\n        },\n        h2: {\n            fontFamily,\n            fontWeight: 400,\n            fontSize: 30\n        },\n        button: {\n            fontFamily,\n            textTransform: 'none',\n            fontWeight: 400\n        }\n    },\n    shape: {\n        borderRadius: 4\n    }\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport App from './App';\nimport theme from './theme'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}